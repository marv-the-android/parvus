>>> Current and initial testing done on Raspbian/Raspberry Pi OS lite
	>> Raspbian is a Pi compatibile distro of Debian
		> Recently renamed to Raspberry Pi OS

PARVUS System Hardware Layout

>>> PARVUS (Rover)
	>> Pi Zero
		> Integrated with:
			- Motor Controller
			- Camera
			- I2C Servo Board
		> Code runs on startup
>>> Base Station
	>> Rasperry Pi
		> Raspberry Pi directly interfaces with radio transciever
	>> Arduino
		> Connects to radio transciever
		> Relays recieved information to connected device via USB
		> Python program parses data from PARVUS via Arduino and provides a user interface (command terminal)
		> Can be used with any device that supports USB and python

Modular approach to programming

File Structure (of rover)
	>Main.py (Main system file)
	>Motor.py (Control of motor and servo systems)
	>Capture.py (Image capture and processing)

Program structure (of rover)
Rough representation of program run order

Main.py (Main system file)
>>> Startup
	>> Motor and Capture libraries are imported
	>> 433MHz transceiver library imported
	>> Transceiver SPI connection initialized
	>> Command library is declared
		> Holds relationship between plaintext commands are appropriate program functions
	>> Broadcasts "Ready to receive)
>>> Main event loop
	>> Checks for commands from base station
		> Commands are sent in batches from base station with start and stop signals
		> Commands are validated against internal command library and saved to list if valid
		> Recieves commands until stop signal is registered
	>> Commands list has been generated
		> List operates like a queue
		> First In, First Out
	>> For each item in list
		> Plaintext command is fetched from list and checked against library for relevant command
		> Relevant command is run with paramters passed from plaintext
		> Command is purged from list and loop occurs again with next command

Motor.py (Library)
>>> Startup
	>> Import libraries
		> GPIO Library (WiringPi / gpiozero / RPi.GPIO / PIGPIO)
			- WiringPi 
			- gpiozero
			- RPi.GPIO is a development library and wasn't intentially designed for 3rd Party use. Some functions are missing.
			- PIGPIO 
		> time
			- sleep
		> Adafruit Servo Controller Library
	>> Variables
		> Motor Speed
			- Global variable that motor functions can use
			- Sets PWM to L298N controller
>>> Define motor functions
	>> Forward(seconds)
		> Runs all wheels forward
		> Takes motor speed as a variable
	>> Backward(seconds)
		> Runs all wheels backward
		> Takes motor speed as a variable
	>> Clockwise(seconds or degrees)
		> Left wheels forward
		> Right wheels backward
		> Takes motor speed as a variable
	>> Anticlockwise(seconds or degrees)
		> Left wheels backward
		> Right wheels forward
		> Takes motor speed as a variable
	>> Speed
		> Allows radio command to modify rover speed
>>> Define servo functions
	>> Turn()
		> Sets servos to position where rover can turn on the spot (wheels turned inwards)
	>> Normal()
		> Returns servos to standard position (all wheels forwards)

Communication
>>> Startup
	>> Import Libaries
		> Adafruit RFM69 transciever libary as radio
		> Time
	>> Define variables
		> Frequency
		> GPIO Pin Outs
			- CS
			- RESET
	>> Initialise RFM69 Object
		> Takes Frequency and GPIO Pin variables to declare where the radio hardware is connected
>>> Define Comms Functions
	>> Initial()
		- Runs on rover boot
		- Broadcasts an "online" notifier to base station
